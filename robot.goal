init module {
	knowledge{
		% Predicate room(X) holds if X is a room (in the list of rooms).
		room(X):- rooms(L), member(X,L).
		
		% Predicate colorInSeq(Colour, Index) holds for the colour present at the index in the sequence of colours.
		colorInSeq(Colour, Index) :- sequence(Colours), nth0(Index,Colours, Colour).
		
		% Predicate nextColorInSeq(Colour, Index) holds for the next colour and index to collect between all agents. 
		% The index will be at least the current sequence number and the first number that doesn't have any dibsBlock.
		nextColorInSeq(Colour, Index) :- sequenceIndex(StartNumber), nextColorInSeq(Colour, StartNumber, Index), colorInSeq(Colour, Index).
		nextColorInSeq(Colour, Acc, Index) :-
			(not(received(_,dibsBlock(Acc, _)))
				-> !, Index = Acc
			; (sequence(Colours), length(Colours, Length), Acc >= Length)
				-> false
			;
				NewAcc is Acc + 1,
				nextColorInSeq(Colour, NewAcc, Index)).
				
		
		% Returns the place in AllPlaces that is closest in number of places crossed to CurrentPlace.
		closestPlace(AllPlaces,CurrentPlace,ClosestPlace) :-
			getClosestPlace(AllPlaces,ClosestPlace,[CurrentPlace]).

		% Gets all places neighbouring at least one place in the list provided as first argument.
		getNeighbours([],[]).
		getNeighbours([A|T],Neighbours) :-
			findall(N,neighbour(A,N),NList),
			getNeighbours(T,NewNeighbours),
			append(NewNeighbours,NList,Neighbours).
			
		% Find the closest place in the graph that intersects with the list of rooms provided.
		% Uses breadth-first search for easy shortest-path finding in the graph
		% AllPlaces is the list of all places from which the closest to the current place should be returned.
		% ClosestPlace is that closest place.
		% Acc is an accumulating list initialized at the current (starting) place.
		getClosestPlace(AllPlaces,ClosestPlace,Acc) :-
			getNeighbours(Acc,FoundList),
			flatten(FoundList,FlatList),
			append(Acc,FlatList,NewList),
			list_to_set(NewList,NewAcc),
			intersection(AllPlaces,NewAcc,NewFoundList),
			length(NewFoundList,Size),
			( Size > 0
			->nth0(0, NewFoundList, ClosestPlace)
			;
			(   length(NewAcc, NewLength), length(Acc, NewLength))
			->  false
			;   getClosestPlace(AllPlaces,ClosestPlace,NewAcc)).
	}
	
	beliefs{
		state(unknown).
	}
	
	program{
		% Inserts all places in beliefs on initialization
		forall bel(percept(place(R))) do insert(place(R)).
		
		% Inserts the agents own name in beliefs on initialization
		forall bel(percept(ownName(X))) do insert(ownName(X)).
		
		% Inserts all navpoints in beliefs on initialization
		forall bel(percept(navpoint(Nb, Room, X, Y, Neightbours))) do insert(navpoint(Nb, Room, X, Y, Neightbours)).
		
		% Inserts the sequence of blocks to be retrieved in beliefs on initialization
		forall bel(percept(sequence(Colours))) do insert(sequence(Colours)).
		
		% Inserts list of all valid rooms in beliefs on initialization
		if bel(findall(R, (place(R), R \== 'DropZone', navpoint(_,R,_,_,Neighbours), length(Neighbours,1)), Rooms)) then insert(rooms(Rooms)).
		
		% Adopts the list of rooms in goals on initialization
		forall bel(place(Place), room(Place)) do adopt(at(Place)).
		
		% Inserts the neighbouring graph of the entire map in beliefs on initialization
		forall bel(navpoint(_,Room,_,_,L),member(X,L)) do insert(neighbour(Room,X),neighbour(X,Room)).
		
		% Inserts the list of unvisited rooms in beliefs on initialization
		if bel(findall(R, room(R), L)) then insert(unvisited(L)).
	}
		
	actionspec{	
		% Actions are only executed if the precondition of that action holds.
		
		% The goTo action makes the agent move to a place (location) in the BW4T environment.
		% As long as the agent has not arrived at the place it is going to, it will be in "traveling" mode.
		goTo(Location) {
            pre { (state(arrived); state(collided)), place(Location) }
			post { true }
		}
		
		% The goToBlock action makes to agent move to a block in a room.
		% As long as the agent has not arrived at the block it is going to, it will be in "traveling" mode.
		goToBlock(Block) {
            pre { state(arrived), at(Room), color(Room, Block,_)  } %TODO: mss aanpassen met nextColorInSeq
			post { atBlock(Block), state(arrived) }
		}
		
		% The pickUp action makes the agent pick up the block it is currently located at.
		pickUp {
            pre { state(arrived), atBlock(BlockID), not(holding(_))}
			post { holding(BlockID) }
		}
		
		% The putDown action makes the agent put down the block it is currently holding.
		putDown {
            pre { state(arrived), holding(BlockID) }
			post { not(holding(BlockID)) }
		}
		
	}
}

main module{
	program {
		% Find all the rooms that aren't visited yet and don't have any dibsRoom.
		#define unvisitedWithoutDibs(L) bel(unvisited(UnvisitedRooms), findall(R, received(_, dibsRoom(R)), DibsRooms), subtract(UnvisitedRooms, DibsRooms, L)).
		
		% Find the closest room (Room) in a list of rooms (L) from it's current place.
		#define closestRoomFromCurrentPlace(L, Room) bel(at(CR), closestPlace(L,CR,Room)).
		
		% If the agent wants to be in a room that is the same as its next target, just go to that room.
		if a-goal(at(Room)), bel(newTarget(Room,_)) then goTo(Room).
		
		% If the agent wants to be arrived at a block, just go to that block (the agent is in the room by the previous goal)
		if a-goal(atBlock(BlockID), state(arrived)), bel(newTarget(_,BlockID)) then goToBlock(BlockID).
		
		% If the agent wants to hold a block and it's at the block it wants to hold, pickup the block.
		if a-goal(holding(BlockID)), bel(atBlock(BlockID), newTarget(_,BlockID)) then pickUp.
		
		% If the agent wants to go to the place 'FrontDropZone' and the agent is holding the block he wants to drop on the 'DropZone', go to the 'FrontZone'
		if a-goal(at('FrontDropZone')), bel(holding(BlockID), newTarget(_,BlockID)) then goTo('FrontDropZone').
		
		% If the agent wants to go to the DropZone, the agent is holding the block he wants to drop on that place and he has the dibs for dropping the current block, go to the 'DropZone'.
		if a-goal(at('DropZone')), bel(holding(BlockID), newTarget(_,BlockID), dibsSequence(Index), sequenceIndex(Index)) then goTo('DropZone').
		
		% If the agent wants to go to the DropZone, the agent is holding the block he wants to drop on that place and he doesn't have the dibs for dropping the current block, go to 'DropZone' (and stay there).
		if a-goal(at('DropZone')), bel(holding(BlockID), newTarget(_,BlockID)) then goTo('FrontDropZone').
		
		% If the agent wants to drop a block (that he is holding) at DropZone and if he is at that place, put the block down.
		% The holding-belief is a preconditition of putDown.
		if a-goal(dropBlock(BlockID)), bel(at('DropZone'), newTarget(Room, BlockID)) then putDown.
		
		% Chooses the goal room that is closest to the current one (without any other agent plans for visiting) for optimal pathfinding.
		if a-goal(at(Room)), unvisitedWithoutDibs(L), closestRoomFromCurrentPlace(L, Room) then goTo(Room) + send(allother, dibsRoom(Room)).
	
		% Otherwise: Goto the places with still a goal.
		if a-goal(at(Place)) then goTo(Place).
	}
}

event module{
	program{
		% Find the closest room (Room) in a list of rooms (L) from the agents current place.
		#define closestRoomFromCurrentPlace(L, Room) bel(at(CR), closestPlace(L,CR,Room)).
		%%%%% percepts sent on change %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
				
		% Process an update of a place. Insert the new place, delete first the old place if there is one.
		if bel(at(Place), percept(at(_))) then delete(at(Place)).
		if bel(percept(at(Place))) then insert(at(Place)).
		
		% If the agents arrives at a place he hasn't been before, remove it from the unvisited list.
		if bel(percept(at(Place)), unvisited(L), select(Place, L, NewL), L\== NewL) then delete(unvisited(L)) + insert(unvisited(NewL)) + send(allother, visited(Place)).
		
		% Process an update of state. Insert the new state, delete first the old state if there is one.
		if bel(state(OldState), percept(state(_)) ) then delete(state(OldState)).
		if bel(percept(state(State))) then insert(state(State)).		
		
		% Process an update of occupied. Insert if a room is occupied, delete a non-occupied room.
		if bel(percept(occupied(Room))) then insert(occupied(Room)). 
		if bel(percept(not(occupied(Room)))) then delete(occupied(Room)). 
		
		
		% Process the colors in a room
		%% If the agent arrives in a new room, delete all the colors of the room. The new knowledge will be based on the current perception. 
		forall bel(percept(at(Room)), color(Room, Block, Colour)) do delete(color(Room, Block, Colour)).
		%% Add the new percepts in a specific room.
		forall bel(at(Room), percept(color(BlockID, ColourID))) do insert(color(Room,BlockID, ColourID)).
		
		% If the agent starts holding a block, the block won't be present in the room anymore, so delete it from the knowledge.
		if bel(percept(holding(BlockID)), color(Room, BlockID, ColourID)) then delete(color(Room,BlockID, ColourID)).

		% Send update from the blocks in a room to all other agents by every update of colors at the current place. 
		forall bel(percept(at(Room)), color(Room, Block, Colour)) do send(allother, color(Room, Block, Colour)).
		if bel(percept(holding(BlockID)), color(Room, BlockID, ColourID)) then send(allother, not(color(Room, BlockID, ColourID))).
		
		% Process update from blocks in a room sent by other agents by first deleting all the information the agent has about this room and then inserting all the new information.
		forall bel(received(_, color(Room, _,_)), color(Room, BlockID, ColourID)) do delete(color(Room, BlockID, ColourID)).
		forall bel(received(Agent, color(Room, BlockID, ColourID))) do insert(color(Room, BlockID, ColourID)) + delete(received(Agent, color(Room, BlockID, ColourID))).
		
		% If another agent sees that a block isn't present in a room anymore, delete it from the beliefs.
		forall bel(received(Agent, not(color(Room, BlockID, ColourID)))) do delete(color(Room, BlockID, ColourID)) + delete(received(Agent, not(color(Room, BlockID, ColourID)))).
		
		% If another agent arrives in another room, this agent doesn't have to discover it anymore.
		forall bel(received(Agent,visited(Place)), unvisited(L), select(Place, L, NewL), L\== NewL) do delete(unvisited(L)) + insert(unvisited(NewL)) + delete(received(Agent,visited(Place))) + drop(at(Place)).
		
		% Process an update of the holding. Insert if holding, delete if not holding anymore.
		if bel(percept(holding(BlockID))) then insert(holding(BlockID)).
		if bel(percept(not(holding(BlockID)))) then delete(holding(BlockID)).
		
		% Process an update of the sequenceIndex. If there is an old one, delete it. Afterwards add the new one.
		if bel(percept(sequenceIndex(_)), sequenceIndex(OldColorID)) then delete(sequenceIndex(OldColorID)).
		if bel(percept(sequenceIndex(ColourID))) then insert(sequenceIndex(ColourID)). 
		
		% If the agent percepts a new sequence number and there aren't any block to deliver, stop discovering the the map and drive to the FrontDropZone (don't block other agents)
		forall bel(percept(sequenceIndex(ColourID)), not(nextColorInSeq(_, _))), a-goal(at(Room)) do drop(at(Room)).
		if bel(percept(sequenceIndex(ColourID)), not(nextColorInSeq(_, _))) then adopt(at('FrontDropZone')).
		
		% Process the percepts for being at a block. Removing if the agents isn't at a block anymore, otherwise add.  
		forall bel(percept(not(atBlock(BlockID)))) do insert(not(atBlock(BlockID))).
		forall bel(percept(atBlock(BlockID))) do insert(atBlock(BlockID)).
			
		% If the agent is in a room and the block is not anymore over there, remove all the goals for picking it up.
		if a-goal(atBlock(BlockID), state(arrived)), bel(newTarget(Room,BlockID)), not(bel(color(Room, BlockID, _))) then drop(holding(BlockID)) + drop(atBlock(BlockID), state(arrived)) + delete(newTarget(Room, BlockID)).
		
		% If the agent wants to picked up a block and he is at the block, the next step is going to the FrontDropZone after holding the block.  
		if a-goal(holding(BlockID)), bel(atBlock(BlockID), newTarget(_,BlockID)) then adopt(at('FrontDropZone')).
		
		% If the agent is driving to the 'FrontDropZone' and he is holding a block to be dropped in the DropZone, the next step will be to go the the DropZone.
		if a-goal(at('FrontDropZone')), bel(holding(BlockID), newTarget(_,BlockID)) then adopt(at('DropZone')).
		
		% If the agent wants to be at the dropzone and he is holding a block, the next step is dropping the the block in the dropzone.
		if a-goal(at('DropZone')), bel(holding(BlockID), newTarget(_,BlockID)) then adopt(dropBlock(BlockID)).
		
		% If the agents wants to drop a block at DropZone and he is at that place and not holding the block anymore. The action is fulfilled and he can remove his target.
		if a-goal(dropBlock(BlockID)), bel(at('DropZone'), newTarget(Room, BlockID)), not(bel(holding(BlockID))) then delete(newTarget(Room, BlockID)) + drop(dropBlock(BlockID)).
		
		% If he doesn't have a current target for picking up a block and dropping, find the closest room where the next block is present without yet any dibs. 
		% Then plan to go to that room, plan to hold the block and send this information to all the other agents. 
		if bel(nextColorInSeq(ColourID, Index), findall(PossibleRoom, (color(PossibleRoom, BlockID, ColourID), not(received(_, dibsBlock(_, BlockID)))), PossibleRooms), color(NewRoom, BlockID, ColourID)), 
			not(bel(newTarget(_1, _2))), closestRoomFromCurrentPlace(PossibleRooms, NewRoom)  
			then insert(newTarget(NewRoom, BlockID), dibsSequence(Index)) + send(allother, dibsBlock(Index, BlockID)) + adopt(holding(BlockID)) + adopt(atBlock(BlockID), state(arrived)) + adopt(at(NewRoom)).
	}
}
